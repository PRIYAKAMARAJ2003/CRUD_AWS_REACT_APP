import json
import os
import time
import uuid
import boto3
from boto3.dynamodb.conditions import Key
from decimal import Decimal

dynamodb = boto3.resource('dynamodb')

def decimal_default(obj):
    if isinstance(obj, Decimal):
        return float(obj)
    raise TypeError

def lambda_handler(event, context):
    http_method = event['httpMethod']
    if http_method == 'GET':
        return get_records(event)
    elif http_method == 'POST':
        return add_record(event)
    elif http_method == 'DELETE':
        return delete_record(event)
    elif http_method == 'PUT':
        return update_record(event)
    else:
        return {
            "statusCode": 405,
            "body": json.dumps({"message": "Method Not Allowed"}),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }

def get_records(event):
    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
    
    try:
        response = table.scan()
        items = response['Items']
        return {
            "statusCode": 200,
            "body": json.dumps(items, default=decimal_default),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }

def add_record(event):
    data = json.loads(event['body'])
    timestamp = int(time.time() * 1000)
    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
    item = {
        'id': str(uuid.uuid1()),
        'firstName': data['firstName'],
        'lastName': data['lastName'],
        'email': data['email'],
        'comments': data['comments'],
        'createdAt': timestamp,
        'updatedAt': timestamp
    }
    try:
        table.put_item(Item=item)
        return {
            "statusCode": 200,
            "body": json.dumps(item),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }

def delete_record(event):
    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
    data = json.loads(event['body'])
    email = data.get('email')

    try:
        # Query the table to find the record with the specified email
        response = table.scan(
            FilterExpression=Key('email').eq(email)
        )
        items = response['Items']
        
        if items:
            # If record(s) found, delete them
            for item in items:
                table.delete_item(
                    Key={
                        'id': item['id']
                    }
                )
            return {
                "statusCode": 200,
                "body": json.dumps({"message": "Record(s) deleted successfully"}),
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*"
                }
            }
        else:
            # If no record found with the specified email
            return {
                "statusCode": 404,
                "body": json.dumps({"message": "No record found with the specified email"}),
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*"
                }
            }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }

def update_record(event):
    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
    data = json.loads(event['body'])
    email = data.get('email')

    try:
        # Query the table to find the record with the specified email
        response = table.scan(
            FilterExpression=Key('email').eq(email)
        )
        items = response['Items']
        
        if items:
            # If record(s) found, update them
            for item in items:
                table.update_item(
                    Key={
                        'id': item['id']
                    },
                    UpdateExpression='SET firstName = :firstName, lastName = :lastName, comments = :comments, options = :options, updatedAt = :updatedAt',
                    ExpressionAttributeValues={
                        ':firstName': data['firstName'],
                        ':lastName': data['lastName'],
                        ':comments': data['comments'],
                        ':options': data['options'],
                        ':updatedAt': int(time.time() * 1000)
                    }
                )
            return {
                "statusCode": 200,
                "body": json.dumps({"message": "Record(s) updated successfully"}),
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*"
                }
            }
        else:
            # If no record found with the specified email
            return {
                "statusCode": 404,
                "body": json.dumps({"message": "No record found with the specified email"}),
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*"
                }
            }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            }
        }


{
  "httpMethod": "PUT",
  "body": "{\"email\": \"priya@epsh.in\", \"firstName\": \"Priya\", \"lastName\": \"Kamaraj\", \"comments\": \"Good Movie\", \"options\": \"Do Not Publish On Web\"}"
}


{
  "httpMethod": "DELETE",
  "body": "{\"email\": \"example@example.com\"}"
}

{
  "httpMethod": "GET"
}

{
  "httpMethod": "POST",
  "body": "{\"email\": \"priya@epsh.in\", \"firstName\": \"Priya\", \"lastName\": \"Kamaraj\", \"comments\": \"Good Movie\", \"options\": \"Do Not Publish On Web\"}"
}